{
    "compilerOptions": {
        /* Дополнительные сведения об этом файле: https://aka.ms/tsconfig.json. */

        /* Проекты */
        "incremental": true /* Включить инкрементную компиляцию */,
        // "composite": true,                                /* Включить ограничения, позволяющие использовать проект TypeScript со ссылками проекта. */
        "tsBuildInfoFile": "./node_modules/.cache/tsc/" /* Укажите папку для файлов инкрементной компиляции .tsbuildinfo. */,
        // "disableSourceOfProjectReferenceRedirect": true,  /* Отключить предпочтение исходных файлов вместо файлов объявлений при обращении к составным проектам */
        // "disableSolutionSearching": true,                 /* Отключить проект от проверки ссылок на несколько проектов при редактировании. */
        // "disableReferencedProjectLoad": true,             /* Уменьшить количество проектов, автоматически загружаемых с помощью TypeScript. */

        /* Язык и среда */
        "target": "esnext" /* Задать версию языка файла JavaScript для создаваемого файла JavaScript и включения объявлений совместимых библиотек. */,
        "lib": [
            "WebWorker",
            "ESNext",
            "DOM"
        ] /* Укажите набор файлов объявлений связанных библиотек, которые описывают целевую среду выполнения. */,
        "jsx": "react-jsx" /* Укажите, какой код JSX создается. */,
        // "experimentalDecorators": true,                   /* Включить экспериментальную поддержку черновиков оформителей TC39 stage 2. */
        // "emitDecoratorMetadata": true,                    /* Выдавать метаданные типа "Конструктор" для декорированных объявлений в исходных файлах. */
        // "jsxFactory": "",                                 /* Укажите функцию фабрики JSX, используемую при нацеливании на вывод React JSX, например "React.createElement" или "h". */
        // "jsxFragmentFactory": "",                         /* Укажите ссылку на фрагмент JSX, используемую для фрагментов при нацеливании на вывод React JSX, например "React.Fragment" или "Fragment". */
        // "jsxImportSource": "",                            /* Укажите спецификатор модуля, используемый для импорта функций множителя JSX при использовании "jsx: react-jsx*". */
        // "reactNamespace": "",                             /* Укажите объект, вызванный для "createElement". Это применимо только при нацеливании на вывод JSX в "react". */
        // "noLib": true,                                    /* Отключить включение любых файлов библиотеки, включая lib.d.ts по умолчанию. */
        // "useDefineForClassFields": true,                  /* Создавать поля класса, соответствующие стандарту ECMAScript. */

        /* Модули */
        "module": "esnext" /* Укажите создаваемый код модуля. */,
        "rootDir": "./" /* Укажите корневую папку в исходных файлах. */,
        "moduleResolution": "node" /* Укажите, как TypeScript ищет файл в заданном описателе модуля. */,
        "baseUrl": "./src" /* Укажите базовый каталог для разрешения не относительных имен модулей. */,
        "paths": {
            "client/*": ["client/*"],
            "common/*": ["common/*"],
            "server/*": ["server/*"],
            "metrics/*": ["metrics/*"]
        } /* Укажите набор записей, которые повторно сопоставляют импорт с дополнительными расположениями поиска. */,
        // "rootDirs": [],                                   /* Разрешить обрабатывать несколько папок как одну при разрешении модулей. */
        // "typeRoots": [],                                  /* Укажите несколько папок, которые действуют как "./node_modules/@types". */
        "types": [
            "react",
            "react-dom",
            "webpack-env",
            "node",
            "trusted-types",
            "jest",
            "dom-screen-wake-lock"
        ] /* Укажите имена типов пакетов, которые будут включены без ссылки в исходном файле. */,
        // "allowUmdGlobalAccess": true,                     /* Разрешение обращения к глобальным значениям UMD из модулей. */
        "resolveJsonModule": true /* Включить импорт файлов JSON */,
        // "noResolve": true,                                /* Запретить "import", "require" или "<reference>" увеличивать количество файлов, которые TypeScript должен добавить в проект. */

        /* Поддержка JavaScript */
        "allowJs": true /* Разрешите файлам JavaScript быть частью программы. Используйте параметр "checkJS" для получения ошибок из этих файлов. */,
        // "checkJs": true,                                  /* Включить отчеты об ошибках в файлах JavaScript с проверкой типа. */
        // "maxNodeModuleJsDepth": 1,                        /* Укажите максимальную глубину папки, используемую для проверки файлов JavaScript в "node_modules". Применимо только в сочетании с "allowJs". */

        /* Вывести */
        // "declaration": true,                              /* Создание D.ts-файлов из файлов TypeScript и JavaScript в проекте. */
        // "declarationMap": true,                           /* Создание сопоставителя с исходным кодом для файлов d.ts. */
        // "emitDeclarationOnly": true,                      /* Вывод только файлов d.ts, но не файлов JavaScript. */
        "sourceMap": false /* Создать файлы сопоставителя с исходным кодом для выпущенных файлов JavaScript. */,
        // "outFile": "./",                                  /* Укажите файл, который объединяет все выходные данные в один файл JavaScript. Если параметр "declaration" имеет значение true, также обозначает файл, который объединяет весь вывод .d.ts. */
        "outDir": ".dist" /* Укажите выходную папку для всех выпущенных файлов. */,
        "removeComments": false /* Отключить создаваемые комментарии. */,
        "noEmit": true /* Disable emitting files from a compilation. */,
        // "importHelpers": true,                            /* Разрешить импортировать вспомогательныхе функции из tslib один раз для каждого проекта, а не включать их для каждого файла. */
        // "importsNotUsedAsValues": "remove",               /* Указание поведения вывода/проверки для импортов, которые используются только для типов */
        // "downlevelIteration": true,                       /* Создать более совместимый, но подробный и менее производительный файл JavaScript для итерации. */
        // "sourceRoot": "",                                 /* Укажите корневой путь для отладчиков для поиска исходного кода ссылки. */
        // "mapRoot": "",                                    /* Укажите расположение, в котором отладчик должен найти файлы карты, вместо созданных расположений. */
        // "inlineSourceMap": true,                          /* Включить файлы исходных карт в создаваемый код JavaScript. */
        // "inlineSources": true,                            /* Включить исходный код в исходные карты в создаваемом файле JavaScript. */
        // "emitBOM": true,                                  /* Порождать метку порядка байтов UTF-8 в начале выходных файлов. */
        // "newLine": "crlf",                                /* Установка символа новой строки для созданных файлов. */
        // "stripInternal": true,                            /* Отключите отправку объявлений, в комментариях JSDoc которых есть "@internal". */
        // "noEmitHelpers": true,                            /* Отключить создание пользовательских вспомогательных функций, такие как "__extends", в скомпилированных выходных данных. */
        // "noEmitOnError": true,                            /* Отключить создаваемый файл, если сообщается об ошибках проверки типов. */
        // "preserveConstEnums": true,                       /* Отключить стирание объявлений "const enum" в сгенерированном коде. */
        // "declarationDir": "./",                           /* Укажите выходной каталог для создаваемых файлов объявления. */

        /* Ограничения взаимодействия */
        // "isolatedModules": true,                          /* Убедитесь, что каждый файл можно безопасно перенести, не полагаясь на другой импорт. */
        "allowSyntheticDefaultImports": true /* Разрешить "импортировать x из y", если модуль не имеет экспорта по умолчанию. */,
        "esModuleInterop": true /* Создайте дополнительный файл JavaScript, чтобы упростить поддержку импорта модулей CommonJS. Это включает "allowSyntheticDefaultImports" для совместимости типов. */,
        // "preserveSymlinks": true,                         /* Отключить разрешение символических ссылок на их реальный путь. Это соответствует тому же флажку в узле. */
        "forceConsistentCasingInFileNames": true /* Убедитесь, что при импорте используется правильный регистр. */,

        /* Проверка типа */
        "strict": true /* Включить все параметры строгой проверки типов. */,
        "noImplicitAny": true /* Включить отчеты об ошибках в выражениях и объявлениях с подразумеваемым типом "any". */,
        "strictNullChecks": true /* При проверке типа учитывайте параметры "null" и "undefined". */,
        "strictFunctionTypes": true /* При назначении функций убедитесь, что параметры и возвращаемые значения совместимы с подтипом. */,
        "strictBindCallApply": true /* Убедитесь, что аргументы для методов "Bind", "Call" и "Apply" соответствуют исходной функции. */,
        "strictPropertyInitialization": true /* Проверьте свойства класса, которые объявлены, но не заданы в конструкторе. */,
        "noImplicitThis": true /* Включить отчеты об ошибках, если параметр "this" имеет тип "any". */,
        "useUnknownInCatchVariables": true /* Введите предложение catch как "unknown" вместо "any". */,
        "alwaysStrict": true /* Убедитесь, что всегда используется "use strict". */,
        "noUnusedLocals": true /* Включить отчеты об ошибках, если локальные переменные не считываться. */,
        "noUnusedParameters": true /* Ошибка, если параметр функции не читается */,
        "exactOptionalPropertyTypes": true /* Интерпретируйте необязательные типы свойств так, как они написаны, а не добавляйте неопределенное значение. */,
        "noImplicitReturns": true /* Включить отчеты об ошибках для кодовых путей, которые не возвращаются в функции явным образом. */,
        "noFallthroughCasesInSwitch": true /* Включить отчет об ошибках для случаев сбоя в операторах switch. */,
        "noUncheckedIndexedAccess": true /* Включить undefined в результаты сигнатуры индекса */,
        "noImplicitOverride": true /* Убедитесь, что переопределяемые элементы в производных классах помечены модификатором переопределения. */,
        "noPropertyAccessFromIndexSignature": true /* Принудительно использует индексированные методы доступа для ключей, объявленных с помощью индексированного типа */,
        "allowUnusedLabels": true /* Отключить отчеты об ошибках для неиспользуемых меток. */,
        "allowUnreachableCode": true /* Отключить отчеты об ошибках для недостижимого кода. */,

        /* Полнота */
        // "skipDefaultLibCheck": true,                      /* Пропуск проверки типа файлов D.ts, включенных в файл TypeScript. */
        "skipLibCheck": true /* Пропустить проверку типа всех файлов .d.ts */
    },
    "include": ["src"],
    "exclude": [
        "**/node_modules",
        "**/.*/",
        "dist",
        "jest-coverage",
        "config",
        "postcss.config.js",
        "./npm-script/**/*",
        "scripts",
        "huskyrc",
        "**/kved.json"
    ]
}
